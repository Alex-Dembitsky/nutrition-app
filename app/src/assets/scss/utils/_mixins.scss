@mixin icon-font {
  font-family: 'icofont' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}


@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }
  &::-moz-placeholder {
    opacity: 1;
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &.placeholder {
    @content;
  }
}


/*  =========================================================================
    Creates a visual triangle.
    Mixin takes ($size, $color, $direction)
    The $size argument can take one or two values—width height.
    The $color argument can take one or two
    values—foreground-color background-color.

    @author http://bourbon.io/docs/#triangle

    $direction:
    up, down, left, right, up-right, up-left, down-right, down-left
    @example scss - Usage
    @include triangle(12px, gray, down);
    @include triangle(12px 6px, gray blue, up-left);
    ========================================================================= */

@mixin triangle($size, $color, $direction) {
  $width: nth($size, 1);
  $height: nth($size, length($size));
  $foreground-color: nth($color, 1);
  $background-color: if(length($color) == 2, nth($color, 2), transparent);
  height: 0;
  width: 0;

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height/2);

    @if $direction == up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
    } @else if $direction == right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;
    } @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
    } @else if $direction == left {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  } @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;

    @if $direction == up-right {
      border-left:  $width solid $background-color;
    } @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction == down-right {
      border-left:  $width solid $background-color;
    } @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == inset-up) {
    border-color: $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-down) {
    border-color: $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-right) {
    border-color: $background-color $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $width $height;
  } @else if ($direction == inset-left) {
    border-color: $background-color $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $width $height;
  }
}


@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
}


//usage example @include responsive-ratio(16,9);

@mixin responsive-ratio($x,$y, $pseudo: false) {
    $padding: unquote( ( $y / $x ) * 100 + '%' );
    @if $pseudo {
        &:before {
            @include pseudo($pos: relative);
            width: 100%;
            padding-top: $padding;
        }
    } @else {
        padding-top: $padding;
    }
}

@mixin sectionStyle($prop, $value-facts, $value-ing, $value-pack, $value-way) {
  .facts & {
    #{$prop}: #{$value-facts};
  }
  .ingredients & {
    #{$prop}: #{$value-ing};
  }
  .packaging & {
    #{$prop}: #{$value-pack};
  }
  .ways & {
    #{$prop}: #{$value-way};
  }
}

@mixin transitionDelay($amount, $step) {
  @for $i from 1 through $amount {
    &:nth-child(#{$i}) {
      transition-delay: $i*$step;
    }
  }
}

@mixin postImgBackground($value-green, $value-light-green, $value-pink) {
  &.green {
    background: #{$value-green};
  }
  &.light-green {
    background: #{$value-light-green};
  }
  &.pink {
    background: #{$value-pink};
  }
}